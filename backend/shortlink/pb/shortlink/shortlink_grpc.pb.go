// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: shortlink.proto

package shortlink

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Shortlink_CreateShortLink_FullMethodName         = "/shortlink.Shortlink/CreateShortLink"
	Shortlink_BatchCreateShortLink_FullMethodName    = "/shortlink.Shortlink/BatchCreateShortLink"
	Shortlink_UpdateShortLink_FullMethodName         = "/shortlink.Shortlink/UpdateShortLink"
	Shortlink_PageShortLink_FullMethodName           = "/shortlink.Shortlink/PageShortLink"
	Shortlink_ListGroupShortLinkCount_FullMethodName = "/shortlink.Shortlink/ListGroupShortLinkCount"
)

// ShortlinkClient is the client API for Shortlink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortlinkClient interface {
	CreateShortLink(ctx context.Context, in *ShortLinkCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error)
	BatchCreateShortLink(ctx context.Context, in *ShortLinkBatchCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error)
	UpdateShortLink(ctx context.Context, in *ShortLinkUpdateRequest, opts ...grpc.CallOption) (*ShortLinkUpdateResponse, error)
	PageShortLink(ctx context.Context, in *ShortLinkPageRequest, opts ...grpc.CallOption) (*ShortLinkPageResponse, error)
	ListGroupShortLinkCount(ctx context.Context, in *ListGroupShortLinkCountRequest, opts ...grpc.CallOption) (*ListGroupShortLinkCountResponse, error)
}

type shortlinkClient struct {
	cc grpc.ClientConnInterface
}

func NewShortlinkClient(cc grpc.ClientConnInterface) ShortlinkClient {
	return &shortlinkClient{cc}
}

func (c *shortlinkClient) CreateShortLink(ctx context.Context, in *ShortLinkCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortLinkCreateResponse)
	err := c.cc.Invoke(ctx, Shortlink_CreateShortLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkClient) BatchCreateShortLink(ctx context.Context, in *ShortLinkBatchCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortLinkCreateResponse)
	err := c.cc.Invoke(ctx, Shortlink_BatchCreateShortLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkClient) UpdateShortLink(ctx context.Context, in *ShortLinkUpdateRequest, opts ...grpc.CallOption) (*ShortLinkUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortLinkUpdateResponse)
	err := c.cc.Invoke(ctx, Shortlink_UpdateShortLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkClient) PageShortLink(ctx context.Context, in *ShortLinkPageRequest, opts ...grpc.CallOption) (*ShortLinkPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortLinkPageResponse)
	err := c.cc.Invoke(ctx, Shortlink_PageShortLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkClient) ListGroupShortLinkCount(ctx context.Context, in *ListGroupShortLinkCountRequest, opts ...grpc.CallOption) (*ListGroupShortLinkCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGroupShortLinkCountResponse)
	err := c.cc.Invoke(ctx, Shortlink_ListGroupShortLinkCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortlinkServer is the server API for Shortlink service.
// All implementations must embed UnimplementedShortlinkServer
// for forward compatibility.
type ShortlinkServer interface {
	CreateShortLink(context.Context, *ShortLinkCreateRequest) (*ShortLinkCreateResponse, error)
	BatchCreateShortLink(context.Context, *ShortLinkBatchCreateRequest) (*ShortLinkCreateResponse, error)
	UpdateShortLink(context.Context, *ShortLinkUpdateRequest) (*ShortLinkUpdateResponse, error)
	PageShortLink(context.Context, *ShortLinkPageRequest) (*ShortLinkPageResponse, error)
	ListGroupShortLinkCount(context.Context, *ListGroupShortLinkCountRequest) (*ListGroupShortLinkCountResponse, error)
	mustEmbedUnimplementedShortlinkServer()
}

// UnimplementedShortlinkServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortlinkServer struct{}

func (UnimplementedShortlinkServer) CreateShortLink(context.Context, *ShortLinkCreateRequest) (*ShortLinkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortLink not implemented")
}
func (UnimplementedShortlinkServer) BatchCreateShortLink(context.Context, *ShortLinkBatchCreateRequest) (*ShortLinkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateShortLink not implemented")
}
func (UnimplementedShortlinkServer) UpdateShortLink(context.Context, *ShortLinkUpdateRequest) (*ShortLinkUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShortLink not implemented")
}
func (UnimplementedShortlinkServer) PageShortLink(context.Context, *ShortLinkPageRequest) (*ShortLinkPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageShortLink not implemented")
}
func (UnimplementedShortlinkServer) ListGroupShortLinkCount(context.Context, *ListGroupShortLinkCountRequest) (*ListGroupShortLinkCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupShortLinkCount not implemented")
}
func (UnimplementedShortlinkServer) mustEmbedUnimplementedShortlinkServer() {}
func (UnimplementedShortlinkServer) testEmbeddedByValue()                   {}

// UnsafeShortlinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortlinkServer will
// result in compilation errors.
type UnsafeShortlinkServer interface {
	mustEmbedUnimplementedShortlinkServer()
}

func RegisterShortlinkServer(s grpc.ServiceRegistrar, srv ShortlinkServer) {
	// If the following call pancis, it indicates UnimplementedShortlinkServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Shortlink_ServiceDesc, srv)
}

func _Shortlink_CreateShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortLinkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServer).CreateShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortlink_CreateShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServer).CreateShortLink(ctx, req.(*ShortLinkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortlink_BatchCreateShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortLinkBatchCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServer).BatchCreateShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortlink_BatchCreateShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServer).BatchCreateShortLink(ctx, req.(*ShortLinkBatchCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortlink_UpdateShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortLinkUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServer).UpdateShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortlink_UpdateShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServer).UpdateShortLink(ctx, req.(*ShortLinkUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortlink_PageShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortLinkPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServer).PageShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortlink_PageShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServer).PageShortLink(ctx, req.(*ShortLinkPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortlink_ListGroupShortLinkCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupShortLinkCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServer).ListGroupShortLinkCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortlink_ListGroupShortLinkCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServer).ListGroupShortLinkCount(ctx, req.(*ListGroupShortLinkCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortlink_ServiceDesc is the grpc.ServiceDesc for Shortlink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortlink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortlink.Shortlink",
	HandlerType: (*ShortlinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortLink",
			Handler:    _Shortlink_CreateShortLink_Handler,
		},
		{
			MethodName: "BatchCreateShortLink",
			Handler:    _Shortlink_BatchCreateShortLink_Handler,
		},
		{
			MethodName: "UpdateShortLink",
			Handler:    _Shortlink_UpdateShortLink_Handler,
		},
		{
			MethodName: "PageShortLink",
			Handler:    _Shortlink_PageShortLink_Handler,
		},
		{
			MethodName: "ListGroupShortLinkCount",
			Handler:    _Shortlink_ListGroupShortLinkCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortlink.proto",
}
