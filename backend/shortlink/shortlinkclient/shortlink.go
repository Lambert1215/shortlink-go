// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: shortlink.proto

package shortlinkclient

import (
	"context"

	"shortlink/pb/shortlink"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ListGroupShortLinkCountRequest  = shortlink.ListGroupShortLinkCountRequest
	ListGroupShortLinkCountResponse = shortlink.ListGroupShortLinkCountResponse
	ShortLinkBatchCreateRequest     = shortlink.ShortLinkBatchCreateRequest
	ShortLinkCreateRequest          = shortlink.ShortLinkCreateRequest
	ShortLinkCreateResponse         = shortlink.ShortLinkCreateResponse
	ShortLinkPageRequest            = shortlink.ShortLinkPageRequest
	ShortLinkPageResponse           = shortlink.ShortLinkPageResponse
	ShortLinkUpdateRequest          = shortlink.ShortLinkUpdateRequest
	ShortLinkUpdateResponse         = shortlink.ShortLinkUpdateResponse

	Shortlink interface {
		RestoreUrl(ctx context.Context, in *ShortLinkCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error)
		CreateShortLink(ctx context.Context, in *ShortLinkCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error)
		CreateShortLinkByLock(ctx context.Context, in *ShortLinkCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error)
		BatchCreateShortLink(ctx context.Context, in *ShortLinkBatchCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error)
		UpdateShortLink(ctx context.Context, in *ShortLinkUpdateRequest, opts ...grpc.CallOption) (*ShortLinkUpdateResponse, error)
		PageShortLink(ctx context.Context, in *ShortLinkPageRequest, opts ...grpc.CallOption) (*ShortLinkPageResponse, error)
		ListGroupShortLinkCount(ctx context.Context, in *ListGroupShortLinkCountRequest, opts ...grpc.CallOption) (*ListGroupShortLinkCountResponse, error)
	}

	defaultShortlink struct {
		cli zrpc.Client
	}
)

func NewShortlink(cli zrpc.Client) Shortlink {
	return &defaultShortlink{
		cli: cli,
	}
}

func (m *defaultShortlink) RestoreUrl(ctx context.Context, in *ShortLinkCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error) {
	client := shortlink.NewShortlinkClient(m.cli.Conn())
	return client.RestoreUrl(ctx, in, opts...)
}

func (m *defaultShortlink) CreateShortLink(ctx context.Context, in *ShortLinkCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error) {
	client := shortlink.NewShortlinkClient(m.cli.Conn())
	return client.CreateShortLink(ctx, in, opts...)
}

func (m *defaultShortlink) CreateShortLinkByLock(ctx context.Context, in *ShortLinkCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error) {
	client := shortlink.NewShortlinkClient(m.cli.Conn())
	return client.CreateShortLinkByLock(ctx, in, opts...)
}

func (m *defaultShortlink) BatchCreateShortLink(ctx context.Context, in *ShortLinkBatchCreateRequest, opts ...grpc.CallOption) (*ShortLinkCreateResponse, error) {
	client := shortlink.NewShortlinkClient(m.cli.Conn())
	return client.BatchCreateShortLink(ctx, in, opts...)
}

func (m *defaultShortlink) UpdateShortLink(ctx context.Context, in *ShortLinkUpdateRequest, opts ...grpc.CallOption) (*ShortLinkUpdateResponse, error) {
	client := shortlink.NewShortlinkClient(m.cli.Conn())
	return client.UpdateShortLink(ctx, in, opts...)
}

func (m *defaultShortlink) PageShortLink(ctx context.Context, in *ShortLinkPageRequest, opts ...grpc.CallOption) (*ShortLinkPageResponse, error) {
	client := shortlink.NewShortlinkClient(m.cli.Conn())
	return client.PageShortLink(ctx, in, opts...)
}

func (m *defaultShortlink) ListGroupShortLinkCount(ctx context.Context, in *ListGroupShortLinkCountRequest, opts ...grpc.CallOption) (*ListGroupShortLinkCountResponse, error) {
	client := shortlink.NewShortlinkClient(m.cli.Conn())
	return client.ListGroupShortLinkCount(ctx, in, opts...)
}
